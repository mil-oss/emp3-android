buildscript {
    apply from: 'gradle/extra.gradle'

    repositories {
        mavenLocal()
        jcenter()
        maven {
            url = "https://nexus.di2e.net/nexus/content/repositories/Private_EMP_Releases/"
            credentials {
                username empUsername
                password empPassword
            }
        }
        maven {
            url = "https://nexus.di2e.net/nexus/content/repositories/Private_EMP_Snapshots/"
            credentials {
                username empUsername
                password empPassword
            }
        }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.3'
        classpath 'com.netflix.nebula:nebula-publishing-plugin:4.9.1'
        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:3.1.0'
        classpath 'mil.army.sec.smartClient:emp3-android-gradle-plugin:1.5.0'
        classpath 'org.ajoberstar:grgit:1.7.0'
    }
}

ext {
    git = org.ajoberstar.grgit.Grgit.open(file('.')) // Open the Git repository in the current directory.
    revision = git.head().id                         // Get commitId of HEAD.
    //revision = git.head().abbreviatedId            // An alternative way using the abbreviatedId.
}

allprojects {
    apply plugin: 'emp3AndroidCommon'
}


task nextPatchVersion(description: "Increments the version property in ${versionFile}.") {
    doFirst {
        nextPatchVersion()
    }
}

void nextPatchVersion() {
    def version = readVersion()

    def octet = version['version'].split("\\.|-")

    def versionMajor = octet[0] as int
    def versionMinor = octet[1] as int
    def versionPatch = octet[2] as int

    versionPatch++

    if (project.hasProperty('isSnapshot')) {
        version['version'] = "${versionMajor}.${versionMinor}.${versionPatch}-SNAPSHOT".toString()
    } else {
        version['version'] = "${versionMajor}.${versionMinor}.${versionPatch}".toString()
    }

    println "Setting version to: ${version['version']}"

    def stream = new FileOutputStream(versionFile)
    try {
        version.store(stream, null)
    } finally {
        stream.close()
    }
}

Properties readVersion() {
    def version = new Properties()
    def stream
    try {
        stream = new FileInputStream(versionFile)
        version.load(stream)
    } catch (FileNotFoundException e) {
        e.printStackTrace();
    } finally {
        if (stream != null) stream.close()
    }
    return version
}